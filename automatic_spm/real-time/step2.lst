SQL> set echo on
SQL> @step2
SQL> @@cost_default
SQL> --
SQL> -- Switch back to the default and we'll get a better plan
SQL> --
SQL> alter session set optimizer_index_cost_adj = 100
  2  /

Session altered.

SQL> --
SQL> -- The Note section indicates real-time SPM is active
SQL> -- This new plan is better than the old plan, and we
SQL> -- want real-time SPM to enforce it
SQL> --
SQL> @@q
SQL> set timing on
SQL> 
SQL> set echo on
SQL> select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount)
  2  from   sales_area1 t1,
  3  	    sales_area2 t2
  4  where  t1.sale_code = t2.sale_code
  5  and    t1.sale_type  = 1;

SUM(T2.AMOUNT)                                                                  
--------------                                                                  
    3.9996E+10                                                                  

Elapsed: 00:00:01.80
SQL> set echo off

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------------------------------------
SQL_ID  g6hqazvppxq6m, child number 1
-------------------------------------
select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount) from   sales_area1 t1,
    sales_area2 t2 where  t1.sale_code = t2.sale_code and
t1.sale_type  = 1

Plan hash value: 3516044501

---------------------------------------------------------------------------------------------
| Id  | Operation                | Name             | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT         |                  |       |       |   113K(100)|          |
|   1 |  SORT AGGREGATE          |                  |     1 |    17 |            |          |
|*  2 |   HASH JOIN              |                  |    40M|   648M|   113K  (1)| 00:00:05 |
|*  3 |    VIEW                  | index$_join$_001 | 20000 |   136K|  4221   (1)| 00:00:01 |
|*  4 |     HASH JOIN            |                  |       |       |            |          |
|*  5 |      INDEX RANGE SCAN    | SALES_TYP1I      | 20000 |   136K|    42   (0)| 00:00:01 |
|   6 |      INDEX FAST FULL SCAN| SALES_AREA1I     | 20000 |   136K|  5214   (1)| 00:00:01 |
|   7 |    TABLE ACCESS FULL     | SALES_AREA2      |  2000K|    19M|   108K  (1)| 00:00:05 |
---------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("T1"."SALE_CODE"="T2"."SALE_CODE")
   3 - filter("T1"."SALE_TYPE"=1)
   4 - access(ROWID=ROWID)
   5 - access("T1"."SALE_TYPE"=1)

Note
-----
   - this is an adaptive plan
   - This is SQL Plan Management Test Plan


34 rows selected.

Elapsed: 00:00:00.08
SQL> --
SQL> -- We'll force a hard parse so that the Note section will be
SQL> -- updated and allow us to see the SQL plan baseline explicitly
SQL> --
SQL> @@flush
SQL> alter system flush shared_pool;

System altered.

Elapsed: 00:00:00.21
SQL> @@q
SQL> set timing on
SQL> 
SQL> set echo on
SQL> select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount)
  2  from   sales_area1 t1,
  3         sales_area2 t2
  4  where  t1.sale_code = t2.sale_code
  5  and    t1.sale_type  = 1;

SUM(T2.AMOUNT)
--------------
    3.9996E+10

Elapsed: 00:00:01.87
SQL> set echo off

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------------------------------------
SQL_ID  g6hqazvppxq6m, child number 1
-------------------------------------
select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount) from   sales_area1 t1,
    sales_area2 t2 where  t1.sale_code = t2.sale_code and
t1.sale_type  = 1

Plan hash value: 3516044501

---------------------------------------------------------------------------------------------
| Id  | Operation                | Name             | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT         |                  |       |       |   113K(100)|          |
|   1 |  SORT AGGREGATE          |                  |     1 |    17 |            |          |
|*  2 |   HASH JOIN              |                  |    40M|   648M|   113K  (1)| 00:00:05 |
|*  3 |    VIEW                  | index$_join$_001 | 20000 |   136K|  4221   (1)| 00:00:01 |
|*  4 |     HASH JOIN            |                  |       |       |            |          |
|*  5 |      INDEX RANGE SCAN    | SALES_TYP1I      | 20000 |   136K|    42   (0)| 00:00:01 |
|   6 |      INDEX FAST FULL SCAN| SALES_AREA1I     | 20000 |   136K|  5214   (1)| 00:00:01 |
|   7 |    TABLE ACCESS FULL     | SALES_AREA2      |  2000K|    19M|   108K  (1)| 00:00:05 |
---------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("T1"."SALE_CODE"="T2"."SALE_CODE")
   3 - filter("T1"."SALE_TYPE"=1)
   4 - access(ROWID=ROWID)
   5 - access("T1"."SALE_TYPE"=1)

Note
-----
   - SQL plan baseline SQL_PLAN_20j5m31t6u71h5ef7a68d used for this statement


33 rows selected.

Elapsed: 00:00:00.20
SQL> @@diag
SQL> column plan_name format a40
SQL> --
SQL> -- 'worse' means that a plan that's just been executed is worse than a plan in ASTS
SQL> -- 'better' means that a plan that's just been executed is better than a plan in ASTS
SQL> -- 'normal' means a plan changed has been spotted and is being verified against a plan in ASTS
SQL> -- 'reverse' means a reverse verification check is being made to ensure the plan previously chosen from ASTS out-performs the previously-rejected new plan
SQL> --
SQL> select p.plan_name, p.foreground_last_verified, pfspm.status result, pfspm.ver verify_type
  2  from dba_sql_plan_baselines p,
  3      XMLTABLE(
  4           '/notes'
  5           passing xmltype(p.notes)
  6           columns
  7               plan_id         NUMBER    path 'plan_id',
  8               flags           NUMBER    path 'flags',
  9               fg_spm          XMLType   path 'fg_spm') pf,
 10       XMLTABLE(
 11           '/fg_spm'
 12           passing pf.fg_spm
 13           columns
 14               ver             VARCHAR2(8)    path 'ver',
 15               status          VARCHAR2(8)    path 'status') pfspm
 16  where notes is not null
 17  and sql_text like 'select /* SPM_TEST_QUERY_Q1%'
 18  order by p.foreground_last_verified
 19  ;

PLAN_NAME                                FOREGROUND_LAST_VERIFIED                                                    RESULT   VERIFY_T
---------------------------------------- --------------------------------------------------------------------------- -------- --------
SQL_PLAN_20j5m31t6u71h5ef7a68d           14-NOV-24 12.05.16.000000 PM                                                better   normal

Elapsed: 00:00:00.10
SQL> 
SQL> spool off
